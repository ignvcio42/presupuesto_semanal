// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

model User {
  id            String       @id @default(uuid())
  email         String       @unique
  name          String
  password      String
  role          String       @default("user") // 'admin' or 'user'
  monthlyBudget Float?
  budgetMode    String?      @default("categorized") // 'categorized' or 'simple'
  categories    Category[]
  expenses      Expense[]
  weeks         Week[]
  monthlyHistory MonthlyHistory[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([email])
  @@index([role])
}

model Category {
  id         String   @id @default(uuid())
  name       String
  allocation Float // Percentage
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  expenses   Expense[]
  weekCategories WeekCategory[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
  @@index([userId, name])
}

model Expense {
  id          String   @id @default(uuid())
  amount      Float
  description String
  date        DateTime
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  week        Week?    @relation(fields: [weekId], references: [id])
  weekId      String?
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([userId, date])
  @@index([weekId])
  @@index([categoryId])
  @@index([userId, weekId])
  @@index([userId, categoryId])
}

model Week {
  id              String         @id @default(uuid())
  weekNumber      Int            // 1-4 o 1-5 dependiendo del mes
  startDate       DateTime
  endDate         DateTime
  weeklyBudget    Float
  spentAmount     Float          @default(0)
  rolloverAmount  Float          @default(0) // Positivo o negativo
  isClosed        Boolean        @default(false)
  user            User           @relation(fields: [userId], references: [id])
  userId          String
  expenses        Expense[]
  weekCategories  WeekCategory[]
  monthlyHistory  MonthlyHistory @relation(fields: [monthlyHistoryId], references: [id])
  monthlyHistoryId String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([userId])
  @@index([monthlyHistoryId])
  @@index([userId, monthlyHistoryId])
  @@index([userId, weekNumber])
  @@index([userId, isClosed])
  @@index([startDate])
  @@index([endDate])
}

model WeekCategory {
  id              String   @id @default(uuid())
  allocatedAmount Float
  spentAmount     Float    @default(0)
  category        Category @relation(fields: [categoryId], references: [id])
  categoryId      String
  week            Week     @relation(fields: [weekId], references: [id])
  weekId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([weekId])
  @@index([categoryId])
  @@index([weekId, categoryId])
  @@unique([weekId, categoryId])
}

model MonthlyHistory {
  id                String   @id @default(uuid())
  year              Int
  month             Int      // 1-12
  totalBudget       Float
  totalSpent        Float
  totalRollover     Float
  budgetMode        String   @default("simple") // 'simple' or 'categorized'
  weeks             Week[]
  user              User     @relation(fields: [userId], references: [id])
  userId            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([userId, year, month])
  @@index([userId])
  @@index([userId, year])
  @@index([year, month])
}
